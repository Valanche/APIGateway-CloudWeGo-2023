// Code generated by hertz generator.

package idlmanager

import (
	"context"
	"io"

	idlprovider "apigateway/IDLProvider"
	idlmanager "apigateway/biz/model/idlmanager"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/adaptor"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// AddIDL .
// @router /manage/Add [POST]
func AddIDL(ctx context.Context, c *app.RequestContext) {
	var err error
	var req idlmanager.AddServiceReq

	httpReq, err := adaptor.GetCompatRequest(&c.Request)

	req.Name = httpReq.FormValue("svcname")
	idlFile, _, err := httpReq.FormFile("idlfile")

	req.FileName = httpReq.MultipartForm.File["idlfile"][0].Filename
	req.FileContent, err = io.ReadAll(idlFile)
	idlFile.Close()

	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	err = idlprovider.AddIDL(req)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	resp := new(idlmanager.ManageServiceResp)

	c.JSON(consts.StatusOK, resp)
}

// ChangeIDL .
// @router /manage/Change [POST]
func ChangeIDL(ctx context.Context, c *app.RequestContext) {
	var err error
	var req idlmanager.ChangeServiceReq

	httpReq, err := adaptor.GetCompatRequest(&c.Request)

	req.Name = httpReq.FormValue("svcname")

	idlFile, _, err := httpReq.FormFile("idlfile")

	req.FileContent, err = io.ReadAll(idlFile)
	idlFile.Close()

	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	err = idlprovider.ChangeIDL(req)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	resp := new(idlmanager.ManageServiceResp)

	c.JSON(consts.StatusOK, resp)
}

// DeleteIDL .
// @router /manage/Delete [POST]
func DeleteIDL(ctx context.Context, c *app.RequestContext) {
	var err error
	var req idlmanager.DeleteServiceReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	err = idlprovider.DeleteIDL(req)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}
	resp := new(idlmanager.ManageServiceResp)

	c.JSON(consts.StatusOK, resp)
}

// GetIDL .
// @router /manage/Get [GET]
func GetIDL(ctx context.Context, c *app.RequestContext) {
	var err error
	var req idlmanager.GetServiceReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(idlmanager.ManageServiceResp)

	idlcontent, exist := idlprovider.IdlContents[idlprovider.IdlPaths[req.Name]]
	resp.RespBody = idlcontent
	if !exist {
		resp.RespBody = "no matching IDL"
	}

	c.JSON(consts.StatusOK, resp)
}

// ListIDL .
// @router /manage/List [GET]
func ListIDL(ctx context.Context, c *app.RequestContext) {
	//var err error

	resp := new(idlmanager.ManageServiceResp)

	for k, v := range idlprovider.IdlPaths {
		resp.Items = append(resp.Items, k+": "+v)
	}

	c.JSON(consts.StatusOK, resp)
}
