package tests

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"net/http"
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
)

const (
	queryURLFmt = "http://127.0.0.1:8888/api/kitex.demo/Query?id="
	registerURL = "http://127.0.0.1:8888/api/kitex.demo/Register"
)

var httpCli = &http.Client{Timeout: 100 * time.Second}

func TestForwardPOST(t *testing.T) {
	// plz start apigateway & etcd & kitex.demo before test
	// this actually tested ForwardGet too.

	// code for post generated by Apifox
	url := "http://localhost:8888/api/kitex.demo/Register"
	method := "POST"

	payload := "{\"college\":{\"address\":\"gotham\",\"name\":\"akhm\"},\"email\":[\"badcave@cchaha.com\"],\"id\":777,\"name\":\"bad man\",\"sex\":\"bat\"}"

	client := &http.Client{}
	req, err := http.NewRequest(method, url, bytes.NewBuffer([]byte(payload)))

	if err != nil {
		fmt.Println(err)
		return
	}
	req.Header.Add("User-Agent", "Apifox/1.0.0 (https://www.apifox.cn)")
	req.Header.Add("Content-Type", "application/json")
	req.Header.Add("Accept", "*/*")
	req.Header.Add("Host", "localhost:8888")
	req.Header.Add("Connection", "keep-alive")

	res, err := client.Do(req)
	if err != nil {
		fmt.Println(err)
		return
	}
	defer res.Body.Close()

	body, err := ioutil.ReadAll(res.Body)
	if err != nil {
		fmt.Println(err)
		return
	}
	fmt.Println(string(body))

	// test by get
	resp, err := httpCli.Get(fmt.Sprint(queryURLFmt, 777))
	defer resp.Body.Close()
	if err != nil {
		return
	}

	if body, err = ioutil.ReadAll(resp.Body); err != nil {
		return
	}

	fmt.Println(string(body))
	assert.Equal(t, payload, string(body))

}
