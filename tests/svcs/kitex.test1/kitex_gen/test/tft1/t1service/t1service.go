// Code generated by Kitex v0.6.1. DO NOT EDIT.

package t1service

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	tft1 "kitex/test1/kitex_gen/test/tft1"
)

func serviceInfo() *kitex.ServiceInfo {
	return t1ServiceServiceInfo
}

var t1ServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "T1Service"
	handlerType := (*tft1.T1Service)(nil)
	methods := map[string]kitex.MethodInfo{
		"Tst": kitex.NewMethodInfo(tstHandler, newT1ServiceTstArgs, newT1ServiceTstResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "tft1",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.6.1",
		Extra:           extra,
	}
	return svcInfo
}

func tstHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*tft1.T1ServiceTstArgs)
	realResult := result.(*tft1.T1ServiceTstResult)
	success, err := handler.(tft1.T1Service).Tst(ctx, realArg.T1)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newT1ServiceTstArgs() interface{} {
	return tft1.NewT1ServiceTstArgs()
}

func newT1ServiceTstResult() interface{} {
	return tft1.NewT1ServiceTstResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Tst(ctx context.Context, t1 *tft1.T1) (r *tft1.T1, err error) {
	var _args tft1.T1ServiceTstArgs
	_args.T1 = t1
	var _result tft1.T1ServiceTstResult
	if err = p.c.Call(ctx, "Tst", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
